/* Copyright (C) 2020 Christoph Theis */

package de.webgen.gui;

import de.webgen.WebGen;
import de.webgen.WebGen.FlagType;
import de.webgen.WebGen.RefreshInterval;
import de.webgen.database.Competition;
import de.webgen.database.Group;
import de.webgen.generator.report.Report;
import de.webgen.gui.model.GroupsTableModel;
import de.webgen.gui.model.ReportsTableModel;
import java.awt.Font;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.io.File;
import java.io.FileInputStream;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.nio.file.Files;


public class ServerPanel extends javax.swing.JPanel {

    final static Charset UTF8 = Charset.forName("UTF-8");
    
    WebGen webGenerator;
    
    HttpServer httpServer;

    /** Creates new form ServerPanel */
    public ServerPanel(String server, String tournament, String path) {
        this.webGenerator = new WebGen(server, tournament, path);
        
        initComponents();
        
        jTableGroups.setModel(new GroupsTableModel());
        
        jTableReports.setModel(new ReportsTableModel());
        
        jTextFieldHost.setText(webGenerator.getFtpHost());
        jTextFieldDir.setText(webGenerator.getFtpDirectory());
        jTextFieldUser.setText(webGenerator.getFtpUser());
        jPasswordFieldPwd.setText(webGenerator.getFtpPassword());
        jCheckBoxPassiveMode.setSelected(webGenerator.getFtpPassive());
        
        try {
            Class.forName("at.co.ttm.ftp.FtpClient");
            jCheckBoxSftp.setSelected(webGenerator.getFtpSecure());
        } catch (Exception ex) {
            jCheckBoxSftp.setVisible(false);
        }

        jComboBoxInterval.setSelectedItem(webGenerator.getInterval());
        
        jTextFieldTitle.setText(webGenerator.getTitle());
        jTextFieldDescription.setText(webGenerator.getDescription());
        jTextFieldTournamentUrl.setText(webGenerator.getTournamentUrl());
        jTextFieldUserConfig.setText(webGenerator.getUserConfig());
        jCheckBoxLivtickerEnabled.setSelected(webGenerator.getLivetickerEnabled());
        jTextFieldNewsUrl.setText(webGenerator.getNewsUrl());
        
        jRadioButtonFlagTypeNone.setActionCommand("None");
        jRadioButtonFlagTypeNation.setActionCommand("Nation");
        jRadioButtonFlagTypeRegion.setActionCommand("Region");
        
        buttonGroupFlags.setSelected(jRadioButtonFlagTypeNone.getModel(), webGenerator.getFlagType() == FlagType.None);
        buttonGroupFlags.setSelected(jRadioButtonFlagTypeNation.getModel(), webGenerator.getFlagType() == FlagType.Nation);
        buttonGroupFlags.setSelected(jRadioButtonFlagTypeRegion.getModel(), webGenerator.getFlagType() == FlagType.Region);
        
        jComboBoxEventActionPerformed(null);
        jComboBoxIntervalActionPerformed(null);
        
        ((ReportsTableModel) jTableReports.getModel()).setReports(webGenerator.getReports());

        (new java.util.Timer()).scheduleAtFixedRate(new java.util.TimerTask() {
            @Override
            public void run() {
                // Update ProgressBar
                long when = ServerPanel.this.webGenerator.scheduledExectionTime();
                long now = System.currentTimeMillis();
                if (now < when) {
                    jProgressBar.setValue((int) ((when - now) / 1000));
                    jProgressBar.setString("" + jProgressBar.getValue() + " s");
                } else {
                    jProgressBar.setValue(0);
                    jProgressBar.setString("");
                }
                
                // Update Groups
                if (jTabbedPane.getSelectedComponent() == jPanelGroups) {
                    jTableGroups.invalidate();
                }
            }
        }, 1000, 1000);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupFlags = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelSettings = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldTitle = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldTournamentUrl = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldNewsUrl = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldUserConfig = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jRadioButtonFlagTypeNone = new javax.swing.JRadioButton();
        jRadioButtonFlagTypeNation = new javax.swing.JRadioButton();
        jRadioButtonFlagTypeRegion = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jCheckBoxLivtickerEnabled = new javax.swing.JCheckBox();
        jButtonLivetickerProperties = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxInterval = new javax.swing.JComboBox();
        jPanelGroups = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jComboBoxEvent = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableGroups = new javax.swing.JTable();
        jTableGroups.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                // Reset values before changing them
                setBackground(null);
                setForeground(null);

                java.awt.Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Group gr = ((de.webgen.gui.model.GroupsTableModel) table.getModel()).getGroup(row);

                if (isSelected) {
                    // Nothing
                } else if (webGenerator.isGroupDisabled(gr)) {
                    comp.setBackground(java.awt.Color.RED);
                } else if (webGenerator.isGroupEnabled(gr)) {
                    comp.setBackground(java.awt.Color.GREEN);
                } else if (!webGenerator.isGroupPublished(gr)) {
                    comp.setForeground(java.awt.Color.GRAY);
                    comp.setFont(comp.getFont().deriveFont(Font.ITALIC));
                }

                return comp;
            }
        });
        jLabel3 = new javax.swing.JLabel();
        jButtonGroupAuto = new javax.swing.JButton();
        jButtonGroupEnable = new javax.swing.JButton();
        jButtonGroupDisable = new javax.swing.JButton();
        jCheckBoxIncludePlayedGroups = new javax.swing.JCheckBox();
        jPanelReports = new javax.swing.JPanel();
        jPanelLists = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableReports = new javax.swing.JTable();
        jTableReports.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                // Reset colors
                setForeground(null);
                setBackground(null);

                java.awt.Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Report rep = ((de.webgen.gui.model.ReportsTableModel) table.getModel()).getReport(row);

                if (isSelected) {

                } else if (!webGenerator.isReportActive(rep)) {
                    comp.setForeground(java.awt.Color.GRAY);
                    comp.setFont(comp.getFont().deriveFont(Font.ITALIC));
                }

                return comp;
            }
        });
        jLabel6 = new javax.swing.JLabel();
        jButtonReportsEnable = new javax.swing.JButton();
        jButtonReportsDisable = new javax.swing.JButton();
        jPanelFtp = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldHost = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldDir = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldUser = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPasswordFieldPwd = new javax.swing.JPasswordField();
        jCheckBoxPassiveMode = new javax.swing.JCheckBox();
        jCheckBoxSftp = new javax.swing.JCheckBox();
        jCheckBoxFtpDebug = new javax.swing.JCheckBox();
        jProgressBar = new javax.swing.JProgressBar();
        jButtonView = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(470, 500));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/webgen/gui/resources/WebGen"); // NOI18N
        jTabbedPane.setName(bundle.getString("Reports")); // NOI18N

        jPanelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel12.setText(bundle.getString("Title")); // NOI18N

        jLabel13.setText(bundle.getString("Tournament Url")); // NOI18N

        jLabel14.setText(bundle.getString("News Url")); // NOI18N

        jLabel15.setText(bundle.getString("Description")); // NOI18N

        jLabel8.setText("User Config");

        jLabel9.setText("Flags");

        buttonGroupFlags.add(jRadioButtonFlagTypeNone);
        jRadioButtonFlagTypeNone.setText("None");
        jRadioButtonFlagTypeNone.setBorder(null);
        jRadioButtonFlagTypeNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFlagTypeNoneActionPerformed(evt);
            }
        });

        buttonGroupFlags.add(jRadioButtonFlagTypeNation);
        jRadioButtonFlagTypeNation.setText("Nation");
        jRadioButtonFlagTypeNation.setBorder(null);

        buttonGroupFlags.add(jRadioButtonFlagTypeRegion);
        jRadioButtonFlagTypeRegion.setText("Region");
        jRadioButtonFlagTypeRegion.setBorder(null);

        jLabel16.setText(bundle.getString("Liveticker")); // NOI18N

        jCheckBoxLivtickerEnabled.setText(bundle.getString("Enabled")); // NOI18N
        jCheckBoxLivtickerEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLivtickerEnabledActionPerformed(evt);
            }
        });

        jButtonLivetickerProperties.setText("...");
        jButtonLivetickerProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLivetickerPropertiesActionPerformed(evt);
            }
        });

        jLabel7.setText(bundle.getString("Interval")); // NOI18N

        jComboBoxInterval.setModel(new javax.swing.DefaultComboBoxModel(de.webgen.WebGen.getIntervals()));
        jComboBoxInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxIntervalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel16Layout.createSequentialGroup()
                                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(10, 10, 10))
                                    .addGroup(jPanel16Layout.createSequentialGroup()
                                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel16Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel16Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(30, 30, 30)))
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(61, 61, 61)))
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                            .addComponent(jTextFieldDescription)
                            .addComponent(jTextFieldTournamentUrl)
                            .addComponent(jTextFieldNewsUrl)
                            .addComponent(jTextFieldUserConfig)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jRadioButtonFlagTypeNone)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonFlagTypeNation)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonFlagTypeRegion))))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel7))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jCheckBoxLivtickerEnabled)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonLivetickerProperties))
                            .addComponent(jComboBoxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTournamentUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNewsUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldUserConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jRadioButtonFlagTypeNone)
                    .addComponent(jRadioButtonFlagTypeNation)
                    .addComponent(jRadioButtonFlagTypeRegion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jCheckBoxLivtickerEnabled)
                    .addComponent(jButtonLivetickerProperties))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelSettingsLayout = new javax.swing.GroupLayout(jPanelSettings);
        jPanelSettings.setLayout(jPanelSettingsLayout);
        jPanelSettingsLayout.setHorizontalGroup(
            jPanelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSettingsLayout.setVerticalGroup(
            jPanelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        jTabbedPane.addTab(bundle.getString("Settings"), jPanelSettings); // NOI18N

        jPanelGroups.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jComboBoxEvent.setModel(new javax.swing.DefaultComboBoxModel(webGenerator.getEvents()));
        jComboBoxEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEventActionPerformed(evt);
            }
        });

        jTableGroups.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTableGroups);

        jLabel3.setText("With selected:");

        jButtonGroupAuto.setText("Auto");
        jButtonGroupAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroupAutoActionPerformed(evt);
            }
        });

        jButtonGroupEnable.setText("Enable");
        jButtonGroupEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroupEnableActionPerformed(evt);
            }
        });

        jButtonGroupDisable.setText("Disable");
        jButtonGroupDisable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroupDisableActionPerformed(evt);
            }
        });

        jCheckBoxIncludePlayedGroups.setText(bundle.getString("Include Groups with Played Matches")); // NOI18N
        jCheckBoxIncludePlayedGroups.setSelected(webGenerator.getIncludeGroups());
        jCheckBoxIncludePlayedGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxIncludePlayedGroupsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jCheckBoxIncludePlayedGroups)
                    .addComponent(jComboBoxEvent, 0, 398, Short.MAX_VALUE)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGroupAuto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGroupEnable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGroupDisable)))
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addGap(16, 16, 16)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButtonGroupAuto)
                    .addComponent(jButtonGroupEnable)
                    .addComponent(jButtonGroupDisable))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxIncludePlayedGroups)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelGroupsLayout = new javax.swing.GroupLayout(jPanelGroups);
        jPanelGroups.setLayout(jPanelGroupsLayout);
        jPanelGroupsLayout.setHorizontalGroup(
            jPanelGroupsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGroupsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
        jPanelGroupsLayout.setVerticalGroup(
            jPanelGroupsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGroupsLayout.createSequentialGroup()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab(bundle.getString("Groups"), jPanelGroups); // NOI18N

        jPanelReports.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTableReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableReports.setTableHeader(null);
        jScrollPane6.setViewportView(jTableReports);

        jLabel6.setText("With selected:");

        jButtonReportsEnable.setText("Enable");
        jButtonReportsEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportsEnableActionPerformed(evt);
            }
        });

        jButtonReportsDisable.setText("Disable");
        jButtonReportsDisable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportsDisableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelListsLayout = new javax.swing.GroupLayout(jPanelLists);
        jPanelLists.setLayout(jPanelListsLayout);
        jPanelListsLayout.setHorizontalGroup(
            jPanelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListsLayout.createSequentialGroup()
                .addGroup(jPanelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListsLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReportsEnable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReportsDisable))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelListsLayout.setVerticalGroup(
            jPanelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelListsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jButtonReportsEnable)
                    .addComponent(jButtonReportsDisable))
                .addGap(196, 196, 196))
        );

        javax.swing.GroupLayout jPanelReportsLayout = new javax.swing.GroupLayout(jPanelReports);
        jPanelReports.setLayout(jPanelReportsLayout);
        jPanelReportsLayout.setHorizontalGroup(
            jPanelReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReportsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelLists, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        jPanelReportsLayout.setVerticalGroup(
            jPanelReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelLists, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab(bundle.getString("Reports"), jPanelReports); // NOI18N

        jPanelFtp.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText(bundle.getString("Server")); // NOI18N

        jLabel2.setText(bundle.getString("Directory")); // NOI18N

        jLabel4.setText(bundle.getString("User")); // NOI18N

        jLabel5.setText(bundle.getString("Password")); // NOI18N

        jCheckBoxPassiveMode.setText(bundle.getString("Passive mode")); // NOI18N
        jCheckBoxPassiveMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPassiveModeActionPerformed(evt);
            }
        });

        jCheckBoxSftp.setText("Secure ftp");
        jCheckBoxSftp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSftpActionPerformed(evt);
            }
        });

        jCheckBoxFtpDebug.setText(bundle.getString("Debug")); // NOI18N
        jCheckBoxFtpDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFtpDebugActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxFtpDebug, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldDir, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldUser, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPasswordFieldPwd, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxSftp)
                            .addComponent(jCheckBoxPassiveMode, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                        .addComponent(jTextFieldHost)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCheckBoxFtpDebug, jCheckBoxPassiveMode});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordFieldPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jCheckBoxFtpDebug)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPassiveMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSftp)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout jPanelFtpLayout = new javax.swing.GroupLayout(jPanelFtp);
        jPanelFtp.setLayout(jPanelFtpLayout);
        jPanelFtpLayout.setHorizontalGroup(
            jPanelFtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFtpLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(34, 34, 34))
        );
        jPanelFtpLayout.setVerticalGroup(
            jPanelFtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFtpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        jTabbedPane.addTab(bundle.getString("Ftp"), jPanelFtp); // NOI18N

        jButtonView.setText(bundle.getString("View")); // NOI18N
        jButtonView.setToolTipText(bundle.getString("View with external browser")); // NOI18N
        jButtonView.setEnabled(java.awt.Desktop.isDesktopSupported());
        jButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewActionPerformed(evt);
            }
        });

        jButtonStart.setText(bundle.getString("Start")); // NOI18N
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonStart)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonView)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonView))
                    .addComponent(jButtonStart))
                .addContainerGap())
        );

        jTabbedPane.getAccessibleContext().setAccessibleName(bundle.getString("Settings")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        if (!webGenerator.isRunning()) {
            webGenerator.setFtpHost(jTextFieldHost.getText());
            webGenerator.setFtpDirectory(jTextFieldDir.getText());
            webGenerator.setFtpUser(jTextFieldUser.getText());
            webGenerator.setFtpPassword(jPasswordFieldPwd.getText());
            webGenerator.setTitle(jTextFieldTitle.getText());
            webGenerator.setDescription(jTextFieldDescription.getText());
            webGenerator.setTournamentUrl(jTextFieldTournamentUrl.getText());
            webGenerator.setNewsUrl(jTextFieldNewsUrl.getText());
            webGenerator.setUserConfig(jTextFieldUserConfig.getText());
            webGenerator.setFlagType(FlagType.valueOf(buttonGroupFlags.getSelection().getActionCommand()));
        }
        new Thread(new Runnable() {
            @Override
            public void run() {
                java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/webgen/gui/resources/WebGen"); // NOI18N
                if (webGenerator.isRunning()) {
                    webGenerator.stop();
                    jButtonStart.setText(bundle.getString("Start"));
                    jProgressBar.setStringPainted(false);
                } else {
                    webGenerator.setInterval((RefreshInterval) jComboBoxInterval.getSelectedItem());
                    if (webGenerator.start()) {
                        jButtonStart.setText(bundle.getString("Stop"));
                        jProgressBar.setStringPainted(true);
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jCheckBoxFtpDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFtpDebugActionPerformed
        webGenerator.setFtpDebug(jCheckBoxFtpDebug.isSelected());
    }//GEN-LAST:event_jCheckBoxFtpDebugActionPerformed

    private void jButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewActionPerformed
        try {
            try {
                if (httpServer == null) {
                    httpServer = HttpServer.create(new InetSocketAddress(0), 0, "/", new HttpHandler() {
                        @Override
                        public void handle(HttpExchange he) throws IOException {
                            if (!he.getRequestMethod().equals("GET")) {
                                he.getResponseHeaders().add("Allow", "GET");
                                sendErrorResponse(he, 405, "Method not allowed");

                                return;
                            }

                            String uri = he.getRequestURI().getPath();

                            // Don't escape
                            if (uri.contains("/../")) {
                                sendErrorResponse(he, 404, "Not found");
                            }

                            String path = new File(webGenerator.getIndexHtmlFile()).getParent();

                            File file = new File(path, uri);

                            if (!file.exists()) {
                                sendErrorResponse(he, 404, "Not found");

                                return;
                            } else if (file.isDirectory()) {

                                File index = new File(file, "index.html");
                                if (!index.exists()) {
                                    sendErrorResponse(he, 404, "Not found");

                                    return;
                                }

                                file = index;
                            }

                            String mime = null;

                            // Sometimes probeContentType will return text/plain for html and js files
                            if (file.getName().endsWith(".html"))
                                mime = "text/html";
                            else if (file.getName().endsWith(".js"))
                                mime = "text/javascript";
                            else
                                mime = Files.probeContentType(file.toPath());

                            he.getResponseHeaders().add("Content-Type", mime == null ? "application/octet-stream" : mime);

                            he.sendResponseHeaders(200, file.length());
                            byte b[] = new byte[0x10000];
                            int  count;
                            try (FileInputStream fis = new FileInputStream(file)) {
                                while ( (count = fis.read(b)) >= 0 )
                                    he.getResponseBody().write(b, 0, count);
                            }
                            he.getResponseBody().close();
                        }

                        private void sendErrorResponse(HttpExchange he, int code, String message) {
                            try {
                                byte[] response = message.getBytes(UTF8);
                                he.sendResponseHeaders(code, response.length);
                                he.getResponseBody().write(response);                                
                                he.getResponseBody().close();
                            } catch (IOException ex) {
                                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                
                    httpServer.start();
                }
                java.awt.Desktop.getDesktop().browse(new java.net.URI("http://localhost:" + httpServer.getAddress().getPort() + "/index.html"));
            } catch (IOException ex) {
                Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                httpServer = null;
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(ServerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonViewActionPerformed

    private void jCheckBoxPassiveModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPassiveModeActionPerformed
        webGenerator.setFtpPassive(jCheckBoxPassiveMode.isSelected());
    }//GEN-LAST:event_jCheckBoxPassiveModeActionPerformed

    private void jCheckBoxIncludePlayedGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIncludePlayedGroupsActionPerformed
        webGenerator.setIncludeGroups(jCheckBoxIncludePlayedGroups.isSelected());
    }//GEN-LAST:event_jCheckBoxIncludePlayedGroupsActionPerformed

    private void jComboBoxEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEventActionPerformed
        GroupsTableModel model = (GroupsTableModel) jTableGroups.getModel();

        Competition cp = (Competition) jComboBoxEvent.getSelectedItem();

        Group[] groups = webGenerator.getGroups(cp);

        Arrays.sort(groups, new java.util.Comparator<Group>() {
            @Override
            public int compare(Group o1, Group o2) {
                return o1.compareTo(o2);
            }
        });

        model.setGroups(groups);

        model.fireTableDataChanged();
    }//GEN-LAST:event_jComboBoxEventActionPerformed

    private void jComboBoxIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxIntervalActionPerformed
        RefreshInterval interval = (RefreshInterval) jComboBoxInterval.getModel().getSelectedItem();
        jProgressBar.setMaximum(interval.getInterval());
        webGenerator.setInterval(interval);
    }//GEN-LAST:event_jComboBoxIntervalActionPerformed

    private void jButtonLivetickerPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLivetickerPropertiesActionPerformed
        try {
            com.google.gson.Gson gson = new com.google.gson.Gson();
            WebGen.LivetickerProperties props = webGenerator.getLivetickerSettings();
            if (props == null)
                props = new WebGen.LivetickerProperties();
            
            PropertyPanel panel = new PropertyPanel();
            panel.setObject(props, true, false);

            int ret = javax.swing.JOptionPane.showConfirmDialog(                     
                    this, panel, "Configuration", 
                    javax.swing.JOptionPane.OK_CANCEL_OPTION,                     
                    javax.swing.JOptionPane.PLAIN_MESSAGE);              

            if (ret == javax.swing.JOptionPane.OK_OPTION) {                 
                panel.updateObject(props);

                webGenerator.setLivetickerSettings(props);
            }   
        } catch (Throwable t) {
            System.err.println(t.toString());
        }
    }//GEN-LAST:event_jButtonLivetickerPropertiesActionPerformed

    private void jCheckBoxLivtickerEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLivtickerEnabledActionPerformed
        webGenerator.setLivetickerEnabled(jCheckBoxLivtickerEnabled.isSelected());
    }//GEN-LAST:event_jCheckBoxLivtickerEnabledActionPerformed

    private void jButtonGroupAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroupAutoActionPerformed
        for (int row : jTableGroups.getSelectedRows()) {
            Group gr = ((GroupsTableModel) jTableGroups.getModel()).getGroup(row);
            webGenerator.setGroupEnabled(gr, false);
            webGenerator.setGroupDisabled(gr, false);
        }
    }//GEN-LAST:event_jButtonGroupAutoActionPerformed

    private void jButtonGroupEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroupEnableActionPerformed
        for (int row : jTableGroups.getSelectedRows()) {
            Group gr = ((GroupsTableModel) jTableGroups.getModel()).getGroup(row);
            webGenerator.setGroupEnabled(gr, true);
            webGenerator.setGroupDisabled(gr, false);
        }
    }//GEN-LAST:event_jButtonGroupEnableActionPerformed

    private void jButtonGroupDisableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroupDisableActionPerformed
        for (int row : jTableGroups.getSelectedRows()) {
            Group gr = ((GroupsTableModel) jTableGroups.getModel()).getGroup(row);
            webGenerator.setGroupDisabled(gr, true);
            webGenerator.setGroupEnabled(gr, false);
        }
    }//GEN-LAST:event_jButtonGroupDisableActionPerformed

    private void jButtonReportsEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReportsEnableActionPerformed
        for (int row : jTableReports.getSelectedRows()) {
            Report rep = ((ReportsTableModel) jTableReports.getModel()).getReport(row);
            webGenerator.setReportActive(rep, true);
        }
    }//GEN-LAST:event_jButtonReportsEnableActionPerformed

    private void jButtonReportsDisableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReportsDisableActionPerformed
        for (int row : jTableReports.getSelectedRows()) {
            Report rep = ((ReportsTableModel) jTableReports.getModel()).getReport(row);
            webGenerator.setReportActive(rep, false);
        }
    }//GEN-LAST:event_jButtonReportsDisableActionPerformed

    private void jCheckBoxSftpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSftpActionPerformed
        webGenerator.setFtpSecure(jCheckBoxSftp.isSelected());
    }//GEN-LAST:event_jCheckBoxSftpActionPerformed

    private void jRadioButtonFlagTypeNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFlagTypeNoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonFlagTypeNoneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupFlags;
    private javax.swing.JButton jButtonGroupAuto;
    private javax.swing.JButton jButtonGroupDisable;
    private javax.swing.JButton jButtonGroupEnable;
    private javax.swing.JButton jButtonLivetickerProperties;
    private javax.swing.JButton jButtonReportsDisable;
    private javax.swing.JButton jButtonReportsEnable;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonView;
    private javax.swing.JCheckBox jCheckBoxFtpDebug;
    private javax.swing.JCheckBox jCheckBoxIncludePlayedGroups;
    private javax.swing.JCheckBox jCheckBoxLivtickerEnabled;
    private javax.swing.JCheckBox jCheckBoxPassiveMode;
    private javax.swing.JCheckBox jCheckBoxSftp;
    private javax.swing.JComboBox jComboBoxEvent;
    private javax.swing.JComboBox jComboBoxInterval;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelFtp;
    private javax.swing.JPanel jPanelGroups;
    private javax.swing.JPanel jPanelLists;
    private javax.swing.JPanel jPanelReports;
    private javax.swing.JPanel jPanelSettings;
    private javax.swing.JPasswordField jPasswordFieldPwd;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JRadioButton jRadioButtonFlagTypeNation;
    private javax.swing.JRadioButton jRadioButtonFlagTypeNone;
    private javax.swing.JRadioButton jRadioButtonFlagTypeRegion;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableGroups;
    private javax.swing.JTable jTableReports;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldDir;
    private javax.swing.JTextField jTextFieldHost;
    private javax.swing.JTextField jTextFieldNewsUrl;
    private javax.swing.JTextField jTextFieldTitle;
    private javax.swing.JTextField jTextFieldTournamentUrl;
    private javax.swing.JTextField jTextFieldUser;
    private javax.swing.JTextField jTextFieldUserConfig;
    // End of variables declaration//GEN-END:variables

}
